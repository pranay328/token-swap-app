import type { Erc20AssetInfo, GetAllWalletNFTsByChainIdRequest, GetAllWalletNFTsByChainIdResponse, GetAllWalletNFTsRequest, GetAllWalletNFTsResponse, GetAllWalletTokensByChainIdRequest, GetAllWalletTokensByChainIdResponse, GetAllWalletTokensRequest, GetAllWalletTokensResponse, GetAllowedAssetsRequest, GetAllowedAssetsResponse, GetAssetErc20ByChainAndSymbolRequest, GetAssetPriceInfoRequest, GetAssetPriceInfoResponse, GetNftAddressRequest, GetNftNameRequest, GetWalletLidoWithdrawalsByChainId, GetWalletLidoWithdrawalsByChainIdResponse, NftAssetInfo } from './types';
/**
 * Gets the estimated dollar unit price of a tokenAddress for checkout
 * @param chainId https://chainlist.org/ e.g. "1" for ethereum
 * @param assetTokenAddress tokenAddress of the asset on the given chain
 * @param apiKey
 * @returns only `unitPrice` is relevant, since amount is not customizable (1 by default)
 */
export declare function getAssetPriceInfo({ chainId, assetTokenAddress, ...options }: GetAssetPriceInfoRequest): Promise<GetAssetPriceInfoResponse>;
/**
 * Gets the ERC20 asset info by chain and symbol
 * @param chainId https://chainlist.org/ e.g. "1" for ethereum
 * @param symbol symbol of the asset
 * @param apiKey
 */
export declare function getAssetErc20ByChainAndSymbol({ chainId, symbol, ...options }: GetAssetErc20ByChainAndSymbolRequest): Promise<Erc20AssetInfo>;
/**
 * Get all tokens for a given wallet address
 * @param walletAddress
 * @param onlyVerifiedTokens If true, only return alchemy tokens that are verified(filters spam)
 * @param apiKey
 * @param signal AbortSignal to cancel the request when no longer needed
 */
export declare function getAllWalletTokens({ walletAddress, onlyVerifiedTokens, ...options }: GetAllWalletTokensRequest): Promise<GetAllWalletTokensResponse>;
/**
 * Get all tokens for a given wallet address on a specific chain
 * @param chainId https://chainlist.org/
 * @param walletAddress
 * @param onlyVerifiedTokens If true, only return alchemy tokens that are verified(filters spam)
 * @param apiKey
 */
export declare function getAllWalletTokensByChainId({ chainId, walletAddress, onlyVerifiedTokens, ...options }: GetAllWalletTokensByChainIdRequest): Promise<GetAllWalletTokensByChainIdResponse>;
/**
 * Get list of assets that are allowed to be used for checkout
 * @param apiKey
 */
export declare function getAllowedAssets(options: GetAllowedAssetsRequest): Promise<GetAllowedAssetsResponse>;
/**=======================
 * POTENTIAL DEPRECATION
 *=======================*/
/**
 * Get all the NFTs owned by a wallet
 * @param walletAddress
 * @param apiKey
 */
export declare function getAllWalletNFTs({ walletAddress, ...options }: GetAllWalletNFTsRequest): Promise<GetAllWalletNFTsResponse>;
/**
 * Get all the NFTs owned by a wallet on a specific chain
 * @param chainId From https://chainlist.org/
 * @param walletAddress Address of holder
 * @param apiKey
 */
export declare function getAllWalletNFTsByChainId({ chainId, walletAddress, ...options }: GetAllWalletNFTsByChainIdRequest): Promise<GetAllWalletNFTsByChainIdResponse>;
/**
 * Get all lido withdrawal request ids for a wallet address on a specific chain
 * @param {string} chainId https://chainlist.org/ ie "1" for ethereum
 * @param {string} holderAddr Address of holder
 * @returns [readyToWithdrawRequestIds, notReadyToWithdrawRequestIds]
 */
export declare function getWalletLidoWithdrawalsByChainId({ chainId, walletAddress, ...options }: GetWalletLidoWithdrawalsByChainId): Promise<GetWalletLidoWithdrawalsByChainIdResponse>;
/**
 * Get the name of an NFT collection
 * @param {string} chainId https://chainlist.org/
 * @param {string} nftAddress Address of NFT
 */
export declare function getNftName({ chainId, nftAddress, ...options }: GetNftNameRequest): Promise<NftAssetInfo>;
/**
 * Get the address and chainId of an NFT collection
 * @param {string} name Name of NFT
 */
export declare function getNftAddress({ name, ...options }: GetNftAddressRequest): Promise<NftAssetInfo>;
