import type { Address, Hex } from 'viem';
import type { ApiCheckoutClientMetadata } from '@funkit/utils';
import type { BaseApiRequest } from '../../consts';
import type { UserOperation } from '../fw-operation';
export type CheckoutApiQuoteParams = {
    fromChainId: string;
    fromTokenAddress: Address;
    toChainId: string;
    toTokenAddress: Address;
    toAmountBaseUnit: string;
    /** @deprecated */
    checkoutExpirationTimestampSeconds: string;
    sponsorInitialTransferGasLimit: string;
    userId: string;
    recipientAddr?: Address;
};
export type CheckoutQuoteParams = BaseApiRequest & Omit<CheckoutApiQuoteParams, 'toAmountBaseUnit' | 'checkoutExpirationTimestampSeconds'> & {
    fromTokenDecimals: number;
    toTokenDecimals: number;
    toTokenAmount: number;
    /** @deprecated */
    expirationTimestampMs?: number;
};
/**===============*
 * CHECKOUT INIT  *
 *================*/
export type CheckoutApiInitParams = {
    userOp?: UserOperation;
    quoteId: string;
    sourceOfFund: string;
    salt: Hex;
    clientMetadata: object;
};
export type CheckoutInitParams = BaseApiRequest & Omit<CheckoutApiInitParams, 'salt'>;
export type CheckoutInitResponse = {
    depositAddr: Address;
};
export type CheckoutInitTokenTransferResponse = CheckoutInitResponse & {
    solanaAddr?: SolanaAddress;
};
/**=====================*
 * CHECKOUT DEACTIVATE  *
 *======================*/
export type CheckoutDeactivateParams = BaseApiRequest & {
    depositAddress: Address;
};
export declare enum CheckoutState {
    FROM_UNFUNDED = "FROM_UNFUNDED",
    FROM_FUNDED = "FROM_FUNDED",
    FROM_POOLED = "FROM_POOLED",
    TO_UNFUNDED = "TO_UNFUNDED",
    TO_FUNDED = "TO_FUNDED",
    TO_POOLED = "TO_POOLED",
    TO_READY = "TO_READY",
    PENDING_RECEIVAL = "PENDING_RECEIVAL",
    COMPLETED = "COMPLETED",
    CHECKOUT_ERROR = "CHECKOUT_ERROR",
    EXPIRED = "EXPIRED",
    CANCELLED = "CANCELLED"
}
export declare const FROM_PROGRESS_CHECKOUT_STATES: CheckoutState[];
export declare const TO_PROGRESS_CHECKOUT_STATES: CheckoutState[];
export declare const IN_PROGRESS_CHECKOUT_STATES: CheckoutState[];
export declare const TERMINAL_CHECKOUT_STATES: CheckoutState[];
export declare enum CheckoutRefundState {
    INITIATED = "INITIATED",
    ERROR = "ERROR",
    REFUNDED = "REFUNDED",
    PROCEEDED = "PROCEEDED",
    WAITING_FOR_FULFILLMENT = "WAITING_FOR_FULFILLMENT",
    FULFILLED = "FULFILLED"
}
export type CheckoutHistoryItem = {
    createdTimeMs: number;
    depositAddr: Address;
    currentDepositAddr: Address;
    recipientAddr: Address;
    expirationTimestampSeconds: number;
    fromAmountBaseUnit: string;
    fromChainId: string;
    fromTokenAddress: Address;
    funWalletAddr: Address;
    lastUpdatedTimeMs: number;
    salt: Hex;
    state: CheckoutState;
    toAmountBaseUnit: string;
    toChainId: string;
    toTokenAddress: Address;
    userOp?: UserOperation;
    version: number;
    sourceOfFund: string;
    clientMetadata: ApiCheckoutClientMetadata;
    refundState?: CheckoutRefundState;
    stateTimestampMs?: Partial<Record<CheckoutState, number>>;
};
/**===============================*
 * CHECKOUT TRANSFER SPONSORSHIP  *
 *================================*/
export type CheckoutTransferSponsorshipParams = BaseApiRequest & {
    transferUserOp: UserOperation;
    depositAddress: Address;
};
export type CheckoutTransferSponsorshipApiParams = {
    userOp: UserOperation;
    depositAddress: Address;
};
export type CheckoutTransferSponsorshipResponse = {
    signerAddress: Address;
    signature: Hex;
    deadline: number;
    paymasterAndData: Hex;
};
/**===============================*
 * RISK ASSESSMENT  *
 *================================*/
export type RiskAssessmentParams = BaseApiRequest & {
    address: FunAddress;
};
type AddressIdentification = {
    name: string;
    address: FunAddress;
    category: string;
    description: string;
    url: string | null;
    createdAt: number;
};
type Cluster = {
    name: string;
    category: string;
};
export type RiskValues = 'Severe' | 'High' | 'Medium' | 'Low';
type ExposureType = 'direct' | 'indirect';
type Exposure = {
    category: string;
    value: number;
    exposureType: ExposureType;
    direction: string;
};
type RiskTrigger = {
    risk: string;
    minThreshold: number;
    maxThreshold: number;
    exposureType: string;
    direction: string;
};
type Trigger = {
    category: string;
    percentage: number;
    message: string;
    ruleTriggered?: RiskTrigger;
};
type PoolMetadata = {
    fees?: number;
    tokens: string[];
};
export type DydxAddress = `dydx${string}`;
export type SolanaAddress = string;
export type FunAddress = Address | DydxAddress | SolanaAddress;
export type RiskAssessmentResponse = {
    address: FunAddress;
    risk: RiskValues;
    riskReason: string | null;
    cluster?: Cluster;
    addressType: string;
    addressIdentifications: AddressIdentification[];
    exposures: Exposure[];
    triggers: Trigger[];
    status: string;
    poolMetadata: PoolMetadata;
};
export type CheckoutInitTokenTransferAddressParams = BaseApiRequest & {
    toChainId: string;
    toTokenAddress: Address;
    userId: string;
    clientMetadata: NonNullable<object>;
    sourceOfFund?: string;
    recipientAddr: string;
};
export {};
