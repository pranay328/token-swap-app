import type { Address } from 'viem';
import type { CheckoutQuoteResponse } from '@funkit/utils';
import { type BaseApiRequest } from '../../consts';
import { type CheckoutDeactivateParams, type CheckoutHistoryItem, type CheckoutInitParams, type CheckoutInitResponse, type CheckoutInitTokenTransferAddressParams, type CheckoutInitTokenTransferResponse, type CheckoutQuoteParams, type CheckoutTransferSponsorshipParams, type CheckoutTransferSponsorshipResponse, type RiskAssessmentParams, type RiskAssessmentResponse } from './types';
/**
 * Gets a checkout quote (estimation).
 * @param fromChainId The ID of the chain where funds will be provided from.
 * @param fromTokenAddress The asset to fund the checkout. This must be either a chain native token or an ERC-20, on the fromChainId.
 * @param fromTokenDecimals The number of decimals for the fromTokenAddress.
 * @param toChainId The ID of the chain where the checkout operation is to be performed.
 * @param toTokenAddress The wanted asset for the checkout operation. This must be either a chain native token or an ERC-20, on the target chain.
 * @param toTokenAmount The amount of wanted asset for the checkout operation in base units.
 * @param toTokenDecimals The number of decimals for the toTokenAddress.
 * @param apiKey A valid fun api key.
 * @param signal AbortSignal to cancel the request when no longer needed
 * @return {Promise<CheckoutCoreQuoteResponse>} The formatted quote object
 */
export declare function getCheckoutQuote({ fromChainId, fromTokenAddress, fromTokenDecimals, toChainId, toTokenAddress, toTokenDecimals, toTokenAmount, sponsorInitialTransferGasLimit, recipientAddr, userId, ...options }: CheckoutQuoteParams): Promise<CheckoutQuoteResponse>;
/**
 * Initializes a checkout
 * @param userOp The checkout UserOp, signed.
 * @param quoteId The quoteId specific to the checkout.
 * @param apiKey A valid fun api key.
 * @return {Address} The generated deposit address
 */
export declare function initializeCheckout({ userOp, quoteId, sourceOfFund, clientMetadata, ...options }: CheckoutInitParams): Promise<CheckoutInitResponse>;
export declare function deactivateCheckout({ depositAddress, ...options }: CheckoutDeactivateParams): Promise<boolean>;
/**
 * Gets a checkout given a depositAddress
 * @param depositAddress A unique deposit address associated with a backend checkout item.
 * @param apiKey A valid fun api key.
 * @param signal AbortSignal to cancel the request when no longer needed
 * @returns The checkout object if exists. Otherwise, null.
 */
export declare function getCheckoutByDepositAddress({ depositAddress, ...options }: BaseApiRequest & {
    depositAddress: Address;
}): Promise<CheckoutHistoryItem | null>;
/**
 * Gets all checkouts associated with a funWallet
 * @param funWalletAddress A funWallet address.
 * @param apiKey A valid fun api key.
 * @param signal AbortSignal to cancel the request when no longer needed
 * @returns A list of checkout objects if exists. Otherwise, an empty array.
 */
export declare function getCheckoutsByFunWalletAddress({ funWalletAddress, ...options }: BaseApiRequest & {
    funWalletAddress: Address;
}): Promise<CheckoutHistoryItem[]>;
/**
 * Gets all checkouts associated with a recipient address
 * @param recipientAddress A wallet address.
 * @param apiKey A valid fun api key.
 * @param signal AbortSignal to cancel the request when no longer needed
 * @returns A list of checkout objects if exists. Otherwise, an empty array.
 */
export declare function getCheckoutsByRecipientAddress({ recipientAddress, ...options }: BaseApiRequest & {
    recipientAddress: Address;
}): Promise<CheckoutHistoryItem[]>;
export interface GetCheckoutsByUserIdParams extends BaseApiRequest {
    userId: string;
    limit?: number;
}
/**
 * Gets all checkouts associated with a funkit userId string
 * @param userId A userId string.
 * @param apiKey A valid fun api key.
 * @param signal AbortSignal to cancel the request when no longer needed
 * @returns A list of checkout objects if exists. Otherwise, an empty array.
 */
export declare function getCheckoutsByUserId({ userId, limit, ...options }: GetCheckoutsByUserIdParams): Promise<CheckoutHistoryItem[]>;
export declare function getPaymasterDataForCheckoutSponsoredTransfer({ depositAddress, transferUserOp, ...options }: CheckoutTransferSponsorshipParams): Promise<CheckoutTransferSponsorshipResponse>;
export declare function getRiskAssessmentForAddress({ address, ...options }: RiskAssessmentParams): Promise<RiskAssessmentResponse>;
export declare function initializeCheckoutTokenTransferAddress({ apiKey, logger, signal, ...body }: CheckoutInitTokenTransferAddressParams): Promise<CheckoutInitTokenTransferResponse>;
