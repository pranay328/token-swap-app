import type { CreateOpRequest, DeleteOpRequest, EstimateOpInput, EstimatedGas, ExecuteOpInput, ExecutionReceipt, GetFullReceiptRequest, GetOpsOfWalletRequest, GetOpsRequest, GetUserOpGasPriceRequest, OpRequest, OperationData, ScheduleOpInput, SignOpRequest, UserOperationGasPrice } from './types';
export declare function createOp({ op, ...options }: CreateOpRequest): Promise<string>;
export declare function getOpsOfWallet({ walletAddr, chainId, status, ...options }: GetOpsOfWalletRequest): Promise<OperationData[]>;
export declare function getOps({ opIds, chainId, ...options }: GetOpsRequest): Promise<OperationData[]>;
export declare function deleteOp({ opId, chainId, ...options }: DeleteOpRequest): Promise<void>;
export declare function signOp({ opId, chainId, signature, signedBy, threshold, ...options }: SignOpRequest): Promise<void>;
export declare function executeOp({ input, ...options }: OpRequest<ExecuteOpInput>): Promise<ExecutionReceipt>;
export declare function estimateOp({ input, ...options }: OpRequest<EstimateOpInput>): Promise<EstimatedGas>;
export declare function scheduleOp({ input, ...options }: OpRequest<ScheduleOpInput>): Promise<void>;
export declare const getFullReceipt: ({ opId, chainId, userOpHash, ...options }: GetFullReceiptRequest) => Promise<ExecutionReceipt>;
export declare const getUserOpGasPrice: ({ chainId, ...options }: GetUserOpGasPriceRequest) => Promise<UserOperationGasPrice>;
