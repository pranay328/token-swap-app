import type { Address, Hex } from 'viem';
import type { BaseApiRequest } from '../../consts';
export declare enum OperationStatus {
    ALL = "",
    PENDING_APPROVED = "PENDING_APPROVED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    OP_SUCCEED = "OP_SUCCEED",
    OP_REVERTED = "OP_REVERTED",
    SCHEDULED = "SCHEDULED"
}
export type OperationMetadata = {
    opId?: Hex;
    chainId: string;
    opType: OperationType;
    authType: AuthType;
    groupId?: Hex;
    message?: string;
    walletAddr: Address;
    status?: OperationStatus;
    proposer: string;
    proposedTime?: number;
    executedBy?: string;
    executedTime?: number;
    relatedOpIds?: Hex[];
    signatures?: Signature[];
    txid?: string;
    gasUsed?: string;
    opFeeUSD?: string;
    opFee?: string;
    executedBlockNumber?: number;
    executedBlockTimeStamp?: number;
};
export interface OperationData extends OperationMetadata {
    userOp: UserOperation;
}
export declare enum AuthType {
    ECDSA = 0,
    MULTI_SIG = 1
}
export type Signature = {
    userId: Hex;
    signature: Hex;
    signedTime: number;
};
export declare enum OperationType {
    SINGLE_OPERATION = "SINGLE_OPERATION",
    GROUP_OPERATION = "GROUP_OPERATION",
    REJECTION = "REJECTION"
}
export type GroupInfo = {
    threshold: number;
    memberIds: Hex[];
};
export type UserOperation = {
    sender: string;
    nonce: bigint;
    initCode?: string;
    callData: string;
    callGasLimit: bigint;
    verificationGasLimit: bigint;
    preVerificationGas?: bigint;
    maxFeePerGas: bigint;
    maxPriorityFeePerGas: bigint;
    paymasterAndData?: string;
    signature?: string;
};
export interface ExecutionReceipt {
    userOpHash: string;
    txId?: Hex;
    gasUsed?: string;
    opFeeUSD?: string;
    opFee?: string;
}
export type EstimatedGas = {
    preVerificationGas: bigint;
    callGasLimit: bigint;
    verificationGasLimit: bigint;
};
export interface CreateOpRequest extends BaseApiRequest {
    op: OperationData;
}
export interface GetOpsOfWalletRequest extends BaseApiRequest {
    walletAddr: Address;
    chainId: string;
    status?: OperationStatus;
}
export interface GetOpsRequest extends BaseApiRequest {
    opIds: Hex[];
    chainId: string;
}
export interface DeleteOpRequest extends BaseApiRequest {
    opId: Hex;
    chainId: string;
}
export interface SignOpRequest extends BaseApiRequest {
    opId: Hex;
    chainId: string;
    signature: Hex;
    signedBy: Address;
    threshold?: number;
}
export type OpRequest<T> = BaseApiRequest & {
    input: T;
};
export type ExecuteOpInput = {
    opId: Hex;
    chainId: string;
    executedBy: string;
    entryPointAddress: Address;
    signature: Hex;
    userOp?: UserOperation;
    groupInfo?: GroupInfo;
};
export type EstimateOpInput = {
    opId?: Hex;
    chainId: string;
    entryPointAddress?: Address;
    signature?: Hex;
    userOp?: UserOperation;
};
export type ScheduleOpInput = {
    opId: Hex;
    chainId: string;
    scheduledBy: string;
    entryPointAddress: Address;
    signature: Hex;
    userOp?: UserOperation;
    groupInfo?: GroupInfo;
};
export interface GetFullReceiptRequest extends BaseApiRequest {
    opId: string;
    chainId: string;
    userOpHash: string;
}
export interface GetUserOpGasPriceRequest extends BaseApiRequest {
    chainId: string;
}
export type UserOperationGasPrice = {
    maxFeePerGas: bigint;
    maxPriorityFeePerGas: bigint;
};
