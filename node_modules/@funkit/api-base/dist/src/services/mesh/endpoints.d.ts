import { type BaseApiRequest } from '../../consts';
import type { GetCryptocurrencyHoldingsRequest, GetCryptocurrencyHoldingsRequestProxy, GetCryptocurrencyHoldingsResponse, GetLinkTokenRequest, GetLinkTokenResponse, GetTransferIntegrationsRequest, GetTransferIntegrationsResponse, MeshConfigureTransferParams, MeshConfigureTransferParamsProxy, MeshConfigureTransferResponse, MeshExecuteTransferRequest, MeshExecuteTransferRequestProxy, MeshExecuteTransferResponse, PreviewTransferRequest, PreviewTransferRequestProxy, PreviewTransferResponse } from './types';
/**
 * @param authToken The authentication token to send the asset from.
 * @param type The type of the integration to send the asset from.
 * @return https://docs.meshconnect.com/api-reference/portfolio/get-holdings
 */
export declare function meshGetCryptocurrencyHoldings({ authToken, type, ...options }: GetCryptocurrencyHoldingsRequest): Promise<GetCryptocurrencyHoldingsResponse>;
export declare function meshGetCryptocurrencyHoldingsProxy({ brokerType, deviceId, ...options }: GetCryptocurrencyHoldingsRequestProxy): Promise<GetCryptocurrencyHoldingsResponse>;
/**
 * @return https://docs.meshconnect.com/api-reference/managed-transfers/get-integrations
 */
export declare function meshGetTransferIntegrations(options: GetTransferIntegrationsRequest): Promise<GetTransferIntegrationsResponse>;
/**
 * @param userId A unique Id representing the end user. Typically this will be a user Id from the
client application. Personally identifiable information, such as an email address or phone number,
should not be used. 50 characters length maximum.
 * @param integrationId A unique identifier representing a specific integration obtained from the list of available integrations.
 * @param restrictMultipleAccounts The final screen of Link allows users to “continue” back to your app or “Link another account.”
If this param is present then this button will be hidden.
 * @param transferOptions Encapsulates transaction-related parameters, including destination addresses and the amount to transfer in fiat currency.
 * @return https://docs.meshconnect.com/api-reference/managed-account-authentication/get-link-token-with-parameters
 */
export declare function meshGetLinkToken({ userId, integrationId, restrictMultipleAccounts, transferOptions, ...options }: GetLinkTokenRequest): Promise<GetLinkTokenResponse>;
export declare function meshConfigureTransfer({ params, ...options }: BaseApiRequest & {
    params: MeshConfigureTransferParams;
}): Promise<MeshConfigureTransferResponse>;
export declare function meshConfigureTransferProxy({ params, ...options }: BaseApiRequest & {
    params: MeshConfigureTransferParamsProxy;
}): Promise<MeshConfigureTransferResponse>;
/**
 * @param fromAuthToken The authentication token to send the asset from.
 * @param fromType The type of the integration to send the asset from.
 * @param toAuthToken The authentication token of the target integration. Can be used alternatively to the address in the ToAddress field. If used, toType should also be provided.
 * @param toType The type of the target integration to send assets to. Used along with the toAuthToken alternatively to ToAddress.
 * @param networkId The network to send the asset over. This is generated by Mesh, it isn't a chainId or chain name.
 * @param symbol The symbol of the digital asset to send.
 * @param toAddress The target address to send the asset to.
 * @param amount The amount to send, in crypto.
 * @param amountInFiat The amount to send, in fiat currency. Can be used alternatively to Amount.
 * @param fiatCurrency Fiat currency that is to get corresponding converted fiat values of transfer and fee amounts. If not provided, defaults to USD.
 * @returns https://docs.meshconnect.com/api-reference/managed-transfers/preview-transfer
 */
export declare function meshPreviewTransfer({ fromAuthToken, fromType, toAuthToken, toType, networkId, symbol, toAddress, amount, amountInFiat, fiatCurrency, ...options }: PreviewTransferRequest): Promise<PreviewTransferResponse>;
export declare function meshPreviewTransferProxy({ apiKey, logger, signal, ...props }: PreviewTransferRequestProxy): Promise<PreviewTransferResponse>;
/**
 *
 * @param fromAuthToken The authentication token to send the asset from.
 * @param fromType The type of the integration to send the asset from.
 * @param previewId The preview ID of the transfer to execute.
 * @param mfaCode Multi-factor auth code that should be provided if the status of the transfer was MfaRequired.
 * @returns https://docs.meshconnect.com/api-reference/managed-transfers/execute-transfer
 */
export declare function meshExecuteTransfer({ fromAuthToken, fromType, previewId, mfaCode, ...options }: MeshExecuteTransferRequest): Promise<MeshExecuteTransferResponse>;
export declare function meshExecuteTransferProxy({ apiKey, logger, signal, ...props }: MeshExecuteTransferRequestProxy): Promise<MeshExecuteTransferResponse>;
interface SaveTokensToMeshProxyRequestBody extends BaseApiRequest {
    deviceId?: string | null;
    brokerType: string;
    accessToken: string;
    refreshToken: string | null;
    accessTokenExpiresIn: number;
    accessTokenExpiresAt: string;
    refreshTokenExpiresAt?: string | null;
}
interface SaveTokensToMeshProxyResponseBody {
    id: number;
    createdAt: Date;
    updatedAt: Date;
    deviceId: string;
    integrationId: string;
    accessToken: string;
    accessTokenExpiresAt: Date | null;
    accessTokenExpiresIn: number | null;
    refreshToken: string | null;
    refreshTokenExpiresAt: Date | null;
}
export declare function saveTokensToMeshProxy({ apiKey, logger, signal, ...props }: SaveTokensToMeshProxyRequestBody): Promise<SaveTokensToMeshProxyResponseBody>;
interface RemoveTokensFromMeshProxyRequestBody extends BaseApiRequest {
    deviceId: string;
    brokerType: string;
}
export declare function removeTokensFromMeshProxy({ deviceId, brokerType, ...options }: RemoveTokensFromMeshProxyRequestBody): Promise<void>;
export {};
